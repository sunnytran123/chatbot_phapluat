import os
import json
import faiss
import numpy as np
import mysql.connector
from docx import Document
from openai import OpenAI

# ===== C·∫•u h√¨nh =====
client = OpenAI(api_key="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")

duong_dan_word = r"C:\Users\phuon\Desktop\luat\luat_hinhsu.docx"
duong_dan_txt = r"C:\Users\phuon\Desktop\luat\toanvan.txt"
duong_dan_faiss = r"D:\python\chatbot_phapluat\faiss_data\vanban.index"

# ===== K·∫øt n·ªëi MySQL =====
conn = mysql.connector.connect(
    host="localhost",
    user="root",
    password="",
    database="chatbot_phapluat"
)
cursor = conn.cursor()

# T·∫°o b·∫£ng n·∫øu ch∆∞a c√≥
cursor.execute("""
CREATE TABLE IF NOT EXISTS vanban (
    id INT PRIMARY KEY,
    noidung TEXT,
    vector TEXT
)
""")

# ===== X·ª≠ l√Ω t·∫°o file TXT t·ª´ Word =====
if not os.path.exists(duong_dan_txt):
    print("‚ö†Ô∏è Ch∆∞a c√≥ file TXT, t·∫°o t·ª´ file Word...")
    if not os.path.exists(duong_dan_word):
        raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y file Word t·∫°i {duong_dan_word}")

    doc = Document(duong_dan_word)
    text_full = ""

    for para in doc.paragraphs:
        if para.text.strip():
            text_full += para.text.strip() + " "

    with open(duong_dan_txt, "w", encoding="utf-8") as f:
        f.write(text_full)

    print(f"‚úÖ ƒê√£ l∆∞u to√†n vƒÉn v√†o {duong_dan_txt}")
else:
    print(f"‚úÖ ƒê√£ c√≥ file TXT s·∫µn: {duong_dan_txt}")

# ===== ƒê·ªçc l·∫°i file TXT =====
with open(duong_dan_txt, "r", encoding="utf-8") as f:
    text_full = f.read()

print(f"‚úÖ T·ªïng s·ªë k√Ω t·ª±: {len(text_full)}")

# ===== Kh·ªüi t·∫°o ho·∫∑c load FAISS =====
os.makedirs(os.path.dirname(duong_dan_faiss), exist_ok=True)

if os.path.exists(duong_dan_faiss):
    index = faiss.read_index(duong_dan_faiss)
    print("‚úÖ ƒê√£ load FAISS t·ª´ file")
else:
    index = faiss.IndexIDMap(faiss.IndexFlatL2(1536))  # 1536 chi·ªÅu
    print("‚ö†Ô∏è Ch∆∞a c√≥ FAISS, t·∫°o m·ªõi...")

# ===== H√†m vector h√≥a vƒÉn b·∫£n =====
def get_embedding(text):
    response = client.embeddings.create(
        input=text,
        model="text-embedding-3-small"
    )
    return response.data[0].embedding

# ===== T√°ch ƒëo·∫°n + Vector h√≥a + L∆∞u DB + FAISS =====
chunk_size = 2500
chunk_overlap = 100  #kho·∫£ng 300 n·∫øu s·ª≠a

start = 0
id_dem = 1

# ƒê·∫øm s·ªë ƒëo·∫°n ƒë√£ c√≥ trong DB ƒë·ªÉ tr√°nh tr√πng l·∫∑p
cursor.execute("SELECT COUNT(*) FROM vanban")
so_dong = cursor.fetchone()[0]

# N·∫øu ch∆∞a c√≥ d·ªØ li·ªáu th√¨ ti·∫øn h√†nh x·ª≠ l√Ω
if so_dong == 0 or not os.path.exists(duong_dan_faiss):
    print("‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu, b·∫Øt ƒë·∫ßu t√°ch ƒëo·∫°n v√† l∆∞u...")
    while start < len(text_full):
        end = start + chunk_size
        chunk = text_full[start:end]

        if chunk.strip():
            print(f"\n--- X·ª≠ l√Ω ƒëo·∫°n ID {id_dem} ---")
            print(chunk[:200] + " ...")

            vector = get_embedding(chunk)
            vector_np = np.array([vector], dtype=np.float32)

            index.add_with_ids(vector_np, np.array([id_dem]))
            vector_str = json.dumps(vector)

            cursor.execute("INSERT INTO vanban (id, noidung, vector) VALUES (%s, %s, %s)", (id_dem, chunk, vector_str))
            conn.commit()

        start += chunk_size - chunk_overlap
        id_dem += 1

    faiss.write_index(index, duong_dan_faiss)
    print(f"\n‚úÖ ƒê√£ l∆∞u FAISS v√†o {duong_dan_faiss}")
    print(f"‚úÖ T·ªïng {id_dem - 1} ƒëo·∫°n ƒë√£ x·ª≠ l√Ω")
else:
    print("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë·∫ßy ƒë·ªß, kh√¥ng c·∫ßn x·ª≠ l√Ω l·∫°i")

# ===== H·ªèi ƒë√°p test k·∫øt h·ª£p OpenAI tr·∫£ l·ªùi =====
while True:
    cau_hoi = input("\n‚ùì Nh·∫≠p c√¢u h·ªèi test (ho·∫∑c 'exit' ƒë·ªÉ tho√°t): ")
    if cau_hoi.lower() == "exit":
        break

    # Vector h√≥a c√¢u h·ªèi
    response = client.embeddings.create(
        input=cau_hoi,
        model="text-embedding-3-small"
    )
    vector_hoi = response.data[0].embedding
    vector_np = np.array([vector_hoi], dtype=np.float32)

    # T√¨m top 5
    k = 5
    D, I = index.search(vector_np, k)

    print(f"\nüîé Top {k} ƒëo·∫°n ph√π h·ª£p nh·∫•t:")

    noi_dung_ghep = ""  # Bi·∫øn l∆∞u to√†n b·ªô n·ªôi dung top 5

    for idx, id_chunk in enumerate(I[0], 1):
        if id_chunk == -1:
            continue

        cursor.execute("SELECT noidung FROM vanban WHERE id = %s", (int(id_chunk),))
        row = cursor.fetchone()

        if row:
            print(f"\n--- ƒêo·∫°n {idx} (ID {id_chunk}) ---")
            print(row[0][:500] + " ...")  # In gi·ªõi h·∫°n 500 k√Ω t·ª± ƒë·∫ßu ti√™n
            noi_dung_ghep += row[0] + "\n"

    if not noi_dung_ghep.strip():
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ph√π h·ª£p.")
        continue

    # Gh√©p v√†o prompt v√† g·ªçi OpenAI GPT tr·∫£ l·ªùi
    prompt = f"""
D·ª±a tr√™n c√°c th√¥ng tin sau ƒë√¢y, h√£y tr·∫£ l·ªùi c√¢u h·ªèi d∆∞·ªõi ƒë√¢y. Ch·ªâ s·ª≠ d·ª•ng th√¥ng tin t·ª´ t√†i li·ªáu ƒë∆∞·ª£c cung c·∫•p ƒë·ªÉ tr·∫£ l·ªùi, kh√¥ng c·∫ßn t√¨m ki·∫øm th√™m d·ªØ li·ªáu b√™n ngo√†i. Tr·∫£ l·ªùi ng·∫Øn g·ªçn, ch√≠nh x√°c v√† ƒë√∫ng tr·ªçng t√¢m.
{noi_dung_ghep}
C√¢u h·ªèi: {cau_hoi}
"""

    response = client.chat.completions.create(
        model="gpt-4o-mini-2024-07-18",
        messages=[
            {"role": "user", "content": prompt}
        ]
    )

    tra_loi = response.choices[0].message.content
    print(f"\n‚úÖ Tr·ª£ l√Ω tr·∫£ l·ªùi: {tra_loi}\n")
